"""Source definition"""
import Booklet, Physics, Xtal, Lenses
import Physics
Booklet=Physics
math=Physics
pi=math.pi
from random import uniform
from numpy import zeros, array
from pylab import array, dot, norm


EPSILON=1.e-10

class Photon(object):
    """Class containing info about a Photon.

    You can get information about the photon and much more.
    At init time you have to declare the Photon with three optional
    parameters:
    - i the number of photons (intensity);
    - r it's position;
    - k it's wavevector.

    After k is defined also relateed quantities derived from it are
    calculated, namely:
    - lam:  the wavelength
    - e:    the energy
    - knormalized: the unit vector of k
    - knorm: the norm of k

    These parameters can be changed also later.
    """
    def __init__(self,
                 i = 1.,
                 r = zeros(3),
                 k = zeros(3),
                 e = 100.):
        self.r = array(r) # position of the photon
        self.k = array(k) # wavevector
        self.i=i # intensity
        # set up some things that vary together with k
        self.k=k
        self.e=e

    # k property
    def __get_k(self):
        return self.__k

    def __set_k(self, k):
        self.__k = array(k)
        self.knorm=Physics.norm(k)
        self.knormalized = Physics.normalize(k)
        # Calculates wavelength and energy of the photon
        if self.knorm==0.:
            self.__e, self.__lam=0., '+inf'
        else:
            self.__lam=2.*pi/self.knorm
            self.__e=Booklet.hc/self.__lam

    def __del_k(self):
        pass

    k=property(__get_k, __set_k, __del_k, "wavevector")

    # e property
    def __get_e(self):
        return self.__e

    def __set_e(self, e):
        '''Changes the energy of the photon and related quantities'''
        self.__e=e
        self.__lam=Booklet.hc/e
        self.knorm=2.*pi/self.__lam
        self.__k=self.knorm*self.knormalized

    def __del_e(self):
        pass

    e = property(__get_e, __set_e, __del_e, "energy")

    # lam property
    def __get_lam(self):
        return self.__lam

    def __set_lam(self, lam):
        '''Changes the energy of the photon and related quantities'''
        self.__lam=lam
        if lam==0.: self.__e="+inf"
        else: self.__e=Booklet.hc/lam
        self.knorm=2.*pi/self.__lam
        self.__k=self.knorm*self.knormalized

    def __del_lam(self):
        pass

    lam = property(__get_lam, __set_lam, __del_lam, "wavelength")

    # Functions to provide rotation and translation to the photon.
    def travelz(self, z=0):
        
        """Move the photon until it reaches the z coordinate reaches the desired value (default z=0).
        Note that this transport function can make the photon go back!"""
        deltaz = self.r[2] - z
        #print "r2", self.r[2]
        self.r = self.r - deltaz/self.k[2]*self.k
        #print "r2", self.r[2]

        
    def travel(self, path):
        '''Makes the photon go forth or back of a to desired path'''
        self.r= self.r + path*self.knormalized

    def deviate(self, theta, phi):
        '''Changes the photon wavevector after a scattering [Penelope]'''
        ctheta, stheta = math.cos(theta), math.sin(theta)
        cphi, sphi = math.cos(phi), math.sin(phi)
        if abs(self.knormalized[2])==1.:
            self.k=(self.knormalized[2]*stheta*cphi,
                    self.knormalized[2]*stheta*sphi,
                    self.knormalized[2]*ctheta)
        else:
            rad=math.sqrt(1.-self.knormalized[2]**2)
            self.k=(self.knormalized[0]*ctheta+stheta/rad*(self.knormalized[0]*self.knormalized[2]*cphi-self.knormalized[1]*sphi),
                    self.knormalized[1]*ctheta+stheta/rad*(self.knormalized[1]*self.knormalized[2]*cphi-self.knormalized[0]*sphi),
                    self.knormalized[2]*ctheta - rad*stheta*cphi)

class PhoXtal(object):

    def __init__(self, photon, xtal):
        """Init function for the class defining the interactions between a photon and a crystal. 
        It is really simple at the moment..."""
        self.photon=photon
        self.xtal=xtal


    def g_needed(self, order=1):
        
        ###############################################
        local_xtal_g = self.change_the_g(self.xtal.g)
        #lgn=Physics.normalize(local_xtal_g)
        
        local_xtal_gphi = Physics.atan2(local_xtal_g[1], local_xtal_g[0])
        ###############################################
        
        """Calculates the reciprocal lattice vector that a photon needs to be
        scattered by a known crystal with planes oriented in a particular
        direction that is already known"""
        #When the energy is too low the returned value is None.
        if self.photon.knorm < self.xtal.gnorm*order: return None
        # For the calculation see the notes of 09/07/2004 modified the 12/07/04

        A = (self.photon.k[0]*math.cos(local_xtal_gphi)+self.photon.k[1]*math.sin(local_xtal_gphi))
        B = self.photon.k[2]
        C = self.xtal.gnorm/2.

        #A = (self.photon.k[0]*math.cos(self.xtal.gphi)+self.photon.k[1]*math.sin(self.xtal.gphi))
        #B = self.photon.k[2]
        #C = self.xtal.gnorm/2.

        if abs(A)<=EPSILON:
            # B can't be 0 together with A unless gnorm=0, so this function should be almost safe
            # The result can be otained with the calculation in the else block
            # but this is faster and common (is the case of paraxial photons).
            if abs(C/B)>1.: return None
            else: 
                theta=math.acos(-C/B)
        else:
            A2B2=A**2+B**2
            BC=B*C
            # Two solutions, but only one satisfies the Laue equation
            Mean=-BC/A2B2
            try:
                Delta=A*math.sqrt(A2B2-C**2)/A2B2
            except ValueError:
                return None
            cosp, cosm = Mean+Delta, Mean-Delta
            thp, thm = math.acos(cosp), math.acos(cosm)
            sinp, sinm = math.sin(thp), math.sin(thm)
            checkp = abs(A*sinp + B*cosp + C)
            checkm = abs(A*sinm + B*cosm + C)
            # Da ricontrollare
            if  checkp<checkm:
                theta=thp
            else:
                theta=thm
        return Physics.spherical2cartesian(self.xtal.gnorm, local_xtal_gphi, theta)
        


    def sigma(self, G=False, order=1, distribution="gaussian"):
    
        local_xtal_g = self.change_the_g(self.xtal.g)

        #print "g", self.xtal.g,  local_xtal_g
        
        #lgn=Physics.normalize(local_xtal_g)
        local_xtal_gphi = Physics.atan2(local_xtal_g[1], local_xtal_g[0])
        #local_xtal_gtheta = math.acos(lgn[2])
        tB = self.xtal.keV2Bragg(self.photon.e)
        factor = 2.5 
        ang_fac = Physics.angular_factor(tB)
        cosine = abs(self.photon.k[2]/self.photon.knorm)
        Q = self.xtal.mat_facs[order]*ang_fac
        if G is None: G=self.g_needed(order)
        if distribution=="hat":
            Dtheta = Physics.anglebetween(G, local_xtal_g) # - 2.0 * Physics.anglebetween(self.xtal.g, local_xtal_g)
            eta = 2.4e-6 + (self.xtal.dim[2] * self.xtal.curvature) / factor
            weight=Physics.hat1(Dtheta, eta)*cosine/Q 
        elif distribution=="gaussian":      
           
            Dtheta = Physics.anglebetween(G, local_xtal_g) # - 2.0 * Physics.anglebetween(self.xtal.g, local_xtal_g)
            weight=Physics.gaussian(Dtheta, self.xtal.eta)
        else: return 0.

        return Q*weight/cosine
    


    def sigmas(self, distribution="gaussian"):
        MAX_ORDER = 5  ####################### ORDINE!!!!
        sigmas_=[]

        for i in range(1, MAX_ORDER+1):

            G = self.g_needed(order=i)
            if G is None:   sigma_= 0.0
            else:           sigma_ = self.sigma(G, order=i, distribution=distribution)
        
            sigmas_.append(sigma_)

            self.xtal.g = - self.xtal.g
            G = self.g_needed(order=i)
            if G is None:    sigmaback=0.  
            else:            sigmaback = self.sigma(G, order=i, distribution=distribution)
            self.xtal.g = - self.xtal.g    #xtal.g returns normal!!!!!          

            sigmas_.append(sigmaback)
            
        return sigmas_




    def CSs(self):
        '''Gives all the CSs of a photon in a Xtal'''
        CSs_=[Physics.CS_Photo(self.xtal.Z, self.photon.e),
              Physics.CS_Compt(self.xtal.Z, self.photon.e),
              Physics.CS_Rayl(self.xtal.Z, self.photon.e)]
        # The first three elements depend only because the Photon interacts with a material
        # The other are the scattering cross section coming out from diffractin theory
        CSs_.extend([x/xtal.rho for x in self.sigmas(xtal)])
        return CSs_

    def isinside(self):
        '''Boolean and self explaining... Works if the crystal has a
        parallelepipedon shape.'''
        if not 0.-EPSILON <= -self.photon.r[2] <= self.xtal.dim[2]+EPSILON: return False
        if not abs(self.photon.r[0])<=self.xtal.dim[0]/2+EPSILON: return False
        if not abs(self.photon.r[1])<=self.xtal.dim[1]/2+EPSILON: return False
        else: return True

    def Compton(self):
        '''Penelope MC algorithm for Compton scattering [Penelope]'''
        phi=uniform(0.,2.*pi)
        k=self.photon.e/Booklet.MEC2
        k2=2.*k
        a_1 = log(1.+k2)
        a_2 = k2*(1.+k) / (1. + k2)**2
        tau_min=1./(1.+k2)
        while True:
            if uniform(0., a_1+a_2)<a_1: tau=tau_min**uniform(0.,1.)
            else: tau=math.sqrt(tau_min**2+uniform(0.,1.)*(1.-tau_min**2))
            costheta=1.-(1.-tau)/(k*tau)
            Tnum=(1.-tau)*((k2+1.)*tau-1.)
            Tden=k**2*tau*(1.+tau**2)
            Tcostheta=(1.- Tnum/Tden)
            if uniform(0.,1.)<Tcostheta:
                theta=acos(costheta)
                self.photon.deviate(theta, phi)
                self.photon.e=self.photon.e/(1.+k*(1.-costheta))
                break

    def Rayleigh(self):
        '''Scattering Rayleigh calculated through rejection method'''
        while True:
            theta=uniform(0, pi)
            ctheta, stheta  = math.cos(theta), math.sin(theta)
            FF=Physics.FF_Rayl(self.xtal.Z, stheta/self.photon.lam)
            ptheta = (1. + ctheta**2) * FF**2
            if ptheta <=uniform(0., self.xtal.Z**2):
                self.photon.deviate(theta, uniform(0., 2.*pi))
                break

    def which_interaction(self):
        '''Decide the interaction of the photon that interacts after a path t.'''
        CSs= self.CSs()
        # Calculate interaction point and move the photon there
        mu = sum(CS*self.xtal.rho for CS in CSs)
        t = Physics.free_path(mu)
        self.photon.travel(t)
        # If the photon exits return -1 (No interaction) else evaluate interaction type
        if not self.isinside(): return -1
        else:
            partial_sums, total_sum = [0.], sum(CSs)
            # Random variable to discriminate the interaction
            rnd=uniform(0., total_sum)
            for i, CS in enumerate(CSs):
                partial_sums.append(partial_sums[-1]+CS)
                if rnd < partial_sums[-1]: return i

    def interact(self, interaction_type):
        '''Once known the interaction proceed to the Photon treatment.'''
        if interaction_type==0: pass # Dead photon do nothing
        elif interaction_type==1: self.Compton() # Compton
        elif interaction_type==2: self.Rayleigh() # Rayleigh
        elif interaction_type==-1: pass # Exits without interaction
        # if i>2 we have diffraction (frontward if i is odd).
        # i/2 or i/2-1 is the order of the diffraction in the two cases
        elif interaction_type%2:
            G=xtal.g*(interaction_type/2)
            self.photon.k=self.photon.k+G # Diffraction frontward
        else:
            G=-self.xtal.g*(interaction_type/2-1)
            self.photon.k=self.photon.k+G # Diffraction Back
        self.int_history.append(interaction_type) # Update history

    def interaction(self):
        """Interaction between photon and xtal."""

        # Lambda function for coordinate transformation
        theta, phi = pi/2-self.xtal.gtheta, self.xtal.gphi
        drag_in_xtal = lambda x: x-self.xtal.r
        drag_out_xtal = lambda x: x+self.xtal.r
        rot_in_xtal  = lambda x: Physics.rot(x, (('z', phi), ('y', theta)))
        rot_out_xtal = lambda x: Physics.rot(x, (('y', -theta), ('z', -phi)))
        in_xtal = lambda x: rot_in_xtal(drag_in_xtal(x))
        out_xtal= lambda x: drag_out_xtal(rot_out_xtal(x))

        # Changing reference frame for photon and xtal
        self.photon.k=rot_in_xtal(self.photon.k)
        self.photon.r = in_xtal(self.photon.r)
        self.xtal.g=rot_in_xtal(self.xtal.g)

        self.int_history=[] # History init

        # Photon adventure begins...
        while self.isinside():
            interaction_type=self.which_interaction()
            self.interact(interaction_type)
            if interaction_type==0: break # Photoabsorption: the photon dies in to xtal

        # Photon adventure is over...
        if interaction_type==0: pass # Dead photon (photo-absorption)
        elif self.photon.knormalized[2]<=0.: # photon points towards focal plane... (no backscattering)
            # Back to the original reference frame
            self.photon.k=rot_out_xtal(self.photon.k)
            self.photon.r=out_xtal(self.photon.r)
            # transport the photon to the focal plane
            self.photon.travelz(0.)
        else: pass # Photon is backscattered and thus lost

        # anyway the xtal goes backs to the previous reference frame
        self.xtal.g=rot_out_xtal(self.xtal.g)





    def erandom(self, Erange=(1.,1000.), Exp=False):
        # Random energy from powerlaw spectrum
        if Exp:
            R = uniform(0., 1.)
            Exp_ = 1.+Exp
            Emin, Emax = (E**Exp_ for E in Erange)
            E=(Emin + R*(Emax-Emin))**(1./Exp_)
        else:
            E = uniform(Erange[0], Erange[1])      
            
        self.photon.e = E
        
        # Once erandom sets the energy, automatically k is set. 
        # Now here, k has the right module value.


    
    def generate_position(self):
       
        theta, phi = pi/2-self.xtal.gtheta, self.xtal.gphi
        self.photon.r = self.random_position_on_surface()
        # lambda functions to:
        # 1. Convert from the crystal reference frame to the lens reference frame;
        # 2. Rotate the photon WRT the lens axis till it corresponds to its defined xtal;
        drag_out_xtal = lambda x: array(x) + array(self.xtal.r)
        rot_out_xtal = lambda x: Physics.rot(x, (('y', -theta), ('z', -phi)))
        
        # Set the photon position in the observer reference frame (rotation + translation)
        self.photon.r=rot_out_xtal(self.photon.r)
        self.photon.r=drag_out_xtal(self.photon.r)


        
    def generator(self, Emin=1., Emax=1000., Exp=False,  sphi=0., stheta=pi, deltasource=0):
      
        '''Generates randomly a photon going onto the xtal.
        Exp is the powerlaw spectral index -2.1 for Crab '''
       
        # Defines the crystal angles using the angular coordinate of the  
        # reciprocal lattice vector g. The same crystal angles (with -sign)
        # will be also appplied to the generated photon.
        
        l = math.sqrt(self.photon.r[0]**2 + self.photon.r[1]**2)
        #print "divergenza",self.photon.r[0], self.photon.r[1], l, self.divergence_stheta(l, deltasource)
        #print "stheta", stheta
        #stheta = stheta - self.divergence_stheta(l, deltasource)
        #sphi = self.divergence_sphi(self.photon.r)
        #print "stheta", stheta
        
        # Set the photon intensity equal to 1. This function generate a probability
        # for the photon, then it will be multplied by the requested intensity set 
        # in the macro
        if self.photon.i !=1: self.photon.i=1.
        # wavevector definition from source angular parameters
        # stheta = pi and sphi = 0 means on-axis source while
        # off-axis source is simply obtained by changing stheta.
        # the k value is related to the energy from the relation k = 2 pi/lambda
        # is the erandom function that make the k from module 1 to the correct module 
        # indeed erandom set the energy and follow that automatically k is set.
        # Now photon.k has module 1, erandom will give the right normalization. 

        self.photon.k=Physics.makenormalvec(sphi, stheta)
        # Energy calculation (powerlaw if Exp is False)
        self.erandom((Emin, Emax), Exp=Exp)
       

    def random_position_on_surface(self):
        # dove cadono i fotoni
        # Crystal reference frame: place the photon randomly on 
        # its surface (x,y) and an EPSILON under the surface (z)
        # posizione random on the crystal surface

        random_pos_on_surface=[0.0,0.0]
        #random_pos_on_surface=[uniform(-x/2, x/2.) for x in self.xtal.dim[:2]]
        random_pos_on_surface.append(-EPSILON)
        return random_pos_on_surface

        

    def divergence_stheta(self, r, deltasource):
        
        source_extension = self.xtal.source_dimension

        if self.xtal.source_lens_distance == "inf":
            return 0.0
        else: 
            theta, phi = pi/2-self.xtal.gtheta, self.xtal.gphi
            rot_in_xtal = lambda x: Physics.rot(x, (('y', -theta), ('z', phi)))
            drag_in_xtal = lambda x: array(self.xtal.r) - array(x)
            
            r=rot_in_xtal(self.photon.r)
            r=drag_in_xtal(self.photon.r)
        
            if r[0] <= 0: s = math.sqrt(r[0]**2 + r[1]**2)
            else: s = -math.sqrt(r[0]**2 + r[1]**2)
            #deltas = uniform (-source_extension/2 , source_extension/2 )
            return math.atan(( s + deltasource) / self.xtal.source_lens_distance)
        

    def  divergence_sphi(self,r):
        theta, phi = pi/2-self.xtal.gtheta, self.xtal.gphi
        rot_in_xtal = lambda x: Physics.rot(x, (('y', -theta), ('z', phi)))
        drag_in_xtal = lambda x: array(self.xtal.r) - array(x)        

        r=rot_in_xtal(self.photon.r)
        r=drag_in_xtal(self.photon.r)
        if self.xtal.source_lens_distance == "inf":
            return 0.0
        else:
            
            return math.atan ( r[1] / r[0] )
            #return math.acos(    r[0]/ (math.sqrt(r[0]**2+r[1]**2))   )
        



    #def divergence_sphi(self,r):
    #    if self.xtal.source_lens_distance == "inf":
    #        return 0.0
    #    else:
    #        return math.atan(r / self.xtal.source_lens_distance)
        

        

    def diffracted_eranges(self, Emin=1., Emax=1000., sphi=0., stheta=pi, deltasource=0): 
        
        l = math.sqrt(self.photon.r[0]**2 + self.photon.r[1]**2)

        sphi = self.divergence_sphi(self.photon.r)
        
        """Energy ranges that are diffracted by the crystals."""
        ##################################################################
        #local_xtal_g = self.change_the_g(self.xtal.g)
        #local_xtal_gphi = Physics.atan2(local_xtal_g[1], local_xtal_g[0])
        #local_xtal_gtheta = math.acos(local_xtal_g[2])
        ##################################################################
        order, reached_max_order = 0,False
        factor = 2.5 
        if self.xtal.structure == "mosaic":
            Deltatheta = 1.0 * (self.xtal.fwhm/60/180*pi) 
        else:
            Darwin_Width = Physics.darwinwidth(self.xtal.Z, self.xtal.hkl, self.photon.e)
            Deltatheta =  Darwin_Width + (self.xtal.dim[2] * self.xtal.curvature) / factor
            
        Delta_curvature = self.xtal.curvature * self.xtal.dim[0]
                 
        thetamin, thetamax = self.xtal.gtheta-Deltatheta/2-Delta_curvature/2, self.xtal.gtheta+Deltatheta/2+Delta_curvature/2
        
        constant=-Booklet.hc/(2.*self.xtal.d_hkl)
        eranges=[]
        while not reached_max_order:
            order+=1
            cosdeltaphi=math.cos(sphi-self.xtal.gphi)
            sinstheta=math.sin(stheta)
            cosstheta=math.cos(stheta)
            sinthetamin=math.sin(thetamin)
            costhetamin=math.cos(thetamin)
            sinthetamax=math.sin(thetamax)
            costhetamax=math.cos(thetamax)

           
            Emin_= constant*order/(cosdeltaphi*sinstheta*sinthetamin+cosstheta*costhetamin)
            Emax_= constant*order/(cosdeltaphi*sinstheta*sinthetamax+cosstheta*costhetamax)
            #print "DELTAE",  order, Emin_, Emax_, Emax_- Emin_
            if Emax_ >= Emax:
                if Emin_>=Emax: return eranges
                else:
                    reached_max_order=True
                    Emax_=Emax
            if Emin_ <= Emin:
                if Emax_ <= Emin: pass
                else:
                    Emin_=Emin
                    eranges.append((Emin_, Emax_))
                    
            else: eranges.append((Emin_, Emax_))  
        return eranges



    def local_eranges(self, Emin=1., Emax=1000., sphi=0., stheta=pi, deltasource=0):
        
        l = math.sqrt(self.photon.r[0]**2 + self.photon.r[1]**2)

        #stheta = stheta - self.divergence_stheta(l, deltasource)
        sphi = self.divergence_sphi(self.photon.r)

        local_xtal_g = self.change_the_g(self.xtal.g) 
        lgn=Physics.normalize(local_xtal_g)
        local_xtal_gphi = Physics.atan2(local_xtal_g[1], local_xtal_g[0])
        local_xtal_gtheta = math.acos(lgn[2])
        order, reached_max_order = 0,False
        factor = 2.5 
        Darwin_Width = Physics.darwinwidth(self.xtal.Z, self.xtal.hkl, self.photon.e)
        if self.xtal.structure == "mosaic":
            Deltatheta = 1.0 * (self.xtal.fwhm/60/180*pi) 
        else:
            Deltatheta = Darwin_Width + (self.xtal.dim[2] * self.xtal.curvature) / factor
        Delta_curvature = self.xtal.curvature * self.xtal.dim[0]
        
        thetamin, thetamax = local_xtal_gtheta-Deltatheta/2, local_xtal_gtheta+Deltatheta/2

        constant=-Booklet.hc/(2.*self.xtal.d_hkl)
        eranges=[]
        while not reached_max_order:
            order+=1
            cosdeltaphi=math.cos(sphi-local_xtal_gphi)
            sinstheta=math.sin(stheta)
            cosstheta=math.cos(stheta)
            sinthetamin=math.sin(thetamin)
            costhetamin=math.cos(thetamin)
            sinthetamax=math.sin(thetamax)
            costhetamax=math.cos(thetamax)
            Eminim_= constant*order/(cosdeltaphi*sinstheta*sinthetamin+cosstheta*costhetamin)
            Emaxim_= constant*order/(cosdeltaphi*sinstheta*sinthetamax+cosstheta*costhetamax)
            if Emaxim_ >= Emax:
                if Eminim_>=Emax: return eranges
                else:
                    reached_max_order=True
                    Emaxim_=Emax
            if Eminim_ <= Emin:
                if Emaxim_ <= Emin: pass
                else:
                    Eminim_=Emin
                    eranges.append((Eminim_, Emaxim_))                   
            else: eranges.append((Eminim_, Emaxim_))

        return eranges
        


    def generator_fast(self, Emin=1., Emax=1000., Exp=0.,  sphi=0., stheta=pi, deltasource=0):
        
        self.generate_position()
       
        l = math.sqrt(self.photon.r[0]**2 + self.photon.r[1]**2)
        
        stheta = stheta - self.divergence_stheta(l, deltasource)
    
        sphi = self.divergence_sphi(self.photon.r)

        """Generates a photon that is diffracted for sure."""
        self.photon.i=0.
        eranges=self.diffracted_eranges(Emin=Emin, Emax=Emax, sphi=sphi, stheta=stheta, deltasource=deltasource)
        
        weights, cumweights = [], []
        partial_sums=0
        Exp_=Exp+1.
       
        # normalization costant proportional to the incident photons
        normalization=1./(Emin**(Exp_)-Emax**(Exp_))
        
        for i, erange in enumerate(eranges):
            # calculating weights, i.e. fraction of photons considered vs all
            # each weight is calculated for a diffraction order
            # cumweights are the sums of the weights
            weight=normalization*(erange[0]**(Exp_)-erange[1]**(Exp_))        
            weights.append(weight)
            partial_sums+=weight
            cumweights.append(partial_sums)
        # random number to decide which are the orders to consider
        rnd=uniform(0., partial_sums)
        for i, cumweight in enumerate(cumweights):
            if rnd<=cumweight:
                self.generator(Emin=eranges[i][0], Emax=eranges[i][1], Exp=Exp, sphi=sphi, stheta=stheta, deltasource=deltasource)
                self.photon.i=weights[i]
              
                break
        


    def change_the_g(self, g): 
        # funzione che in base alla posizione del cristallo su cui cade il
        # fotone gli cambia il g relativamente alla curvatura del cristallo
        raggio = math.sqrt (self.photon.r[0]**2 + self.photon.r[1]**2)
        
        delta_angle =  (self.xtal.rho-raggio ) * self.xtal.curvature

        gtheta = self.xtal.gtheta + delta_angle
        
        return Physics.spherical2cartesian(norm(g),self.xtal.gphi, gtheta)



    def fast_diffraction(self):
        T=self.xtal.dim[2]  
        order, sigma_ = 0,0.
        i=0.
        for sigma in self.sigmas(distribution="gaussian"):
            i+=.5
            if sigma > sigma_: order, sigma_ = int(i)+1, sigma
        self.photon.k=self.photon.k+self.xtal.g*order  # concetto di piattezza
        # efficienza per mosaico/perfetto PIATTO
        PoS = 0.5*math.exp(-Booklet.mu(self.xtal.Z, self.photon.e)*T)*(1.-math.exp(-sigma_*T))
        print self.photon.e, PoS
        self.photon.i = self.photon.i * PoS
        
    #counter = 0
   
    def fast_diff_bent(self, Focal, Emin=1., Emax=1000., Exp=0.,  sphi=0., stheta=pi, deltasource = 0): 
        
        #print "fotone", self.photon.r
        l = math.sqrt(self.photon.r[0]**2 + self.photon.r[1]**2)
        
        stheta = stheta - self.divergence_stheta(l, deltasource)
        
        sphi = self.divergence_sphi(self.photon.r)

        factor = 2.5     
        
        new_g = self.change_the_g(self.xtal.g)
        
        i, order, sigma_ = 0., 0., 0.
        
##########################################################################################################  
        if self.xtal.structure == "mosaic":
            for sigma in self.sigmas("gaussian"):
                i+=.5
                if sigma > sigma_:
                    order = int(i)+1
                    sigma_ = sigma
            
            eranges = self.local_eranges(Emin=Emin, Emax=Emax, sphi=sphi, stheta=stheta, deltasource=deltasource)
            
            totaleranges =  self.diffracted_eranges(Emin=Emin, Emax=Emax, sphi=sphi, stheta=stheta, deltasource=deltasource)

            #print self.photon.e, eranges[0][0],  eranges[0][1]
            #print "PRIMA", self.photon.k
            if self.photon.e > eranges[0][0] and self.photon.e < eranges[0][1]:          
            #if self.photon.e > eranges[0][0] and self.photon.e < 140.:
                
                self.photon.k = self.photon.k + new_g * order
                #print  12.39*math.sqrt(self.photon.k[0]**2+self.photon.k[1]**2+self.photon.k[2]**2)/(2*math.pi)
            else:                                                                 
 
                self.photon.k = self.photon.k

            #print (self.photon.k[0]/self.photon.k[2])/math.pi*180
            
            #print ""
##########################################################################################################
        else:
            for sigma in self.sigmas("hat"):
                i+=.5
                if sigma > sigma_: 
                    order  = int(i)+1
                    sigma_ = sigma
            eranges=self.local_eranges(Emin=Emin, Emax=Emax, sphi=sphi, stheta=stheta, deltasource=deltasource)
            totaleranges =  self.diffracted_eranges(Emin=Emin, Emax=Emax, sphi=sphi, stheta=stheta, deltasource=deltasource)
            if self.photon.e > eranges[0][0] and self.photon.e < eranges[0][1]:      self.photon.k = self.photon.k + self.xtal.g    
            else:                                                                    self.photon.k = self.photon.k 
########################################################################################################################

        tB = self.xtal.keV2Bragg(self.photon.e,1)
        #print "TTTTTT", tB 
        mu = Booklet.mu(self.xtal.Z, self.photon.e)
        up_lambda = math.pi * self.xtal.volume * math.cos(tB)
        down_lambda =  (Booklet.hc /  self.photon.e) * Booklet.rem_angstrom * abs(self.xtal.sf) * ( 1 + math.cos(tB))
        lambda0 = up_lambda / down_lambda
        absorption = math.exp(-(mu * self.xtal.dim[2]) / (math.cos(tB) ))
        diffraction = 1 - math.exp(-(math.pi**2 * self.xtal.d_hkl ) / (1e-8 * (self.xtal.curvature+(1e-10)) * lambda0**2) )
        if self.xtal.curvature != 0 and self.xtal.structure == "perfect":
            PoS = diffraction * absorption #* sigma_
            self.photon.i = self.photon.i * PoS
        else:
            
            PoS = 0.5 * (1.-math.exp(-sigma_* self.xtal.dim[2])) * math.exp(-Booklet.mu(self.xtal.Z, self.photon.e)*self.xtal.dim[2])
            #print "POS", PoS
            self.photon.i = self.photon.i * PoS
           


class Source(PhoXtal):
    def __init__(self, phi=0., offset=0., powerindex=0., crab=1.):
        """Class defining X-ray source with some characteristics"""
        pass

if __name__=='__main__':
    ph=Photon()
    print ph.lam, ph.e, ph.k, ph.r, ph.knormalized, ph.knorm
    pass
